<?php
/**
* @package shorty an ownCloud url shortener plugin
* @category internet
* @author Christian Reiner
* @copyright 2011-2014 Christian Reiner <foss@christian-reiner.info>
* @license GNU Affero General Public license (AGPL)
* @link information http://apps.owncloud.com/content/show.php/Shorty?content=150401
*
* This library is free software; you can redistribute it and/or
* modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE
* License as published by the Free Software Foundation; either
* version 3 of the license, or any later version.
*
* This library is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU AFFERO GENERAL PUBLIC LICENSE for more details.
*
* You should have received a copy of the GNU Affero General Public
* License along with this library.
* If not, see <http://www.gnu.org/licenses/>.
*
*/

/**
 * @file proxy.php
 * This is the plugins central proxying feature
 * All proxy requests are handled by this file.
 * @access public
 * @author Christian Reiner
 */

// swallow any accidental output generated by php notices and stuff to preserve a clean JSON reply structure
OC_Shorty_Tools::ob_control ( TRUE );

// Session checks
OCP\App::checkAppEnabled ( 'shorty' );
OCP\User::checkLoggedIn  ( );

$RUNTIME_NOSETUPFS = true;

try
{
	$mode  = OC_Shorty_Type::req_argument ( 'mode', OC_Shorty_Type::STRING, TRUE );

	switch ( $mode )
	{
		default:
			// unknown / undefined proxy mode
			throw new OC_Shorty_HttpException ( 403 );

		case 'favicon':
			$hash = OC_Shorty_Type::req_argument ( 'hash', OC_Shorty_Type::STRING, FALSE );
			if ($hash) {
				// a hash is specified: this is not referring to an existing Shorty, so validate the hash
				// this validation should prevent miss usage of the proxy feature
				$url = OC_Shorty_Type::req_argument ( 'subject', OC_Shorty_Type::URL, TRUE );
				// re-hash the url and compare the result with the specified hash
				if ( ! OC_Shorty_Tools::checkSubjectHash ($url, $hash) ) {
					// invalid hash specified
					throw new OC_Shorty_HttpException ( 403 );
				}
			} else {
				// no hash specified: this is referring to an existing Shorty
				$id     = OC_Shorty_Type::req_argument ( 'subject', OC_Shorty_Type::ID, TRUE );
				$params = array ( 'id' => $id, );
				$query  = OCP\DB::prepare ( OC_Shorty_Query::FAVICON_BY_ID );
				$result = $query->execute ( $params );
				$reply  = $result->fetchRow();
				$url = $reply['favicon'];
			}

			// swallow any output generated by php notices and stuff to preserve a clean response
			header_remove ('Content-Type');
			header_remove ('Cache-Control');
			header_remove ('Expires');
			header_remove ('Pragma');
			OC_Shorty_Tools::ob_control ( FALSE );

			// use curl to retrieve the payload from the remote server
			$curl = curl_init ( );
			curl_setopt ( $curl, CURLOPT_URL, $url );
			curl_setopt ( $curl, CURLOPT_SSL_VERIFYHOST, (OCP\Config::getUserValue(OCP\User::getUser(),'shorty','backend-ssl-verify')) );
			curl_setopt ( $curl, CURLOPT_SSL_VERIFYPEER, (OCP\Config::getUserValue(OCP\User::getUser(),'shorty','backend-ssl-verify')) );
			curl_setopt ( $curl, CURLOPT_FAILONERROR, true);
			curl_setopt ( $curl, CURLOPT_HTTPGET, true );
			curl_setopt ( $curl, CURLOPT_HEADER, false );
			curl_setopt ( $curl, CURLOPT_FOLLOWLOCATION, true);
			curl_setopt ( $curl, CURLOPT_MAXREDIRS, 5);
			curl_setopt ( $curl, CURLOPT_RETURNTRANSFER, false);
			curl_setopt ( $curl, CURLOPT_SSL_VERIFYPEER, false);
			curl_setopt ( $curl, CURLOPT_SSL_VERIFYHOST, false);
			curl_setopt ( $curl, CURLOPT_RANGE, '0-64000');
			curl_setopt ( $curl, CURLOPT_USERAGENT, 'ownCloud Shorty');
			// buffer the payload so that we can react on problems like missing resources
			ob_start();
			header ( 'Cache-Control: public, max-age=10800, pre-check=10800' );
			header ( 'Expires: ' . date(DATE_RFC822,strtotime(' 2 day')) );
			header ( 'Pragma: cache' );
			curl_exec ( $curl );
			if (   curl_errno($curl)
				|| ('image/'!=substr(curl_getinfo($curl, CURLINFO_CONTENT_TYPE), 0, 6)) ) {
				// something is wrong, dump payload and send a blank instead
				ob_end_clean();
				header ( 'Content-Disposition: inline; filename="blank.png"' );
				header ( 'Content-Type: image/png' );
				readfile ( OCP\Util::imagePath('shorty','blank.png') );
			} else {
				// all fine, flush payload to client
				header ( sprintf('Content-Type: %s', curl_getinfo($curl, CURLINFO_CONTENT_TYPE) ) );
				header ( sprintf('Content-Length: %s', curl_getinfo($curl, CURLINFO_CONTENT_LENGTH_DOWNLOAD) ) );
				ob_end_flush();
			}
			curl_close ( $curl );
	}

} catch ( OC_Shorty_Exception $e ) { header($e->getMessage()); }
